// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// alphpow
arma::mat alphpow(double x, arma::mat mat);
RcppExport SEXP _cpmgee_alphpow(SEXP xSEXP, SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(alphpow(x, mat));
    return rcpp_result_gen;
END_RCPP
}
// cmat
List cmat(Rcpp::NumericVector ctimes, double alpha, Rcpp::String corrmod, Rcpp::String diffmeth, double h);
RcppExport SEXP _cpmgee_cmat(SEXP ctimesSEXP, SEXP alphaSEXP, SEXP corrmodSEXP, SEXP diffmethSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ctimes(ctimesSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type corrmod(corrmodSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type diffmeth(diffmethSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(cmat(ctimes, alpha, corrmod, diffmeth, h));
    return rcpp_result_gen;
END_RCPP
}
// fixmod
Rcpp::List fixmod(Rcpp::List mod, arma::rowvec coeffs, Rcpp::List X);
RcppExport SEXP _cpmgee_fixmod(SEXP modSEXP, SEXP coeffsSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type mod(modSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type coeffs(coeffsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(fixmod(mod, coeffs, X));
    return rcpp_result_gen;
END_RCPP
}
// mat_add
arma::sp_mat mat_add(const arma::sp_mat& a, const arma::sp_mat& b);
RcppExport SEXP _cpmgee_mat_add(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_add(a, b));
    return rcpp_result_gen;
END_RCPP
}
// mat_minus
arma::sp_mat mat_minus(const arma::sp_mat& a, const arma::sp_mat& b);
RcppExport SEXP _cpmgee_mat_minus(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_minus(a, b));
    return rcpp_result_gen;
END_RCPP
}
// ordgee
Rcpp::List ordgee(Rcpp::List mod, Rcpp::List icormat, Rcpp::List X, Rcpp::NumericVector ctimes, unsigned int categories, unsigned int omaxit, double otol);
RcppExport SEXP _cpmgee_ordgee(SEXP modSEXP, SEXP icormatSEXP, SEXP XSEXP, SEXP ctimesSEXP, SEXP categoriesSEXP, SEXP omaxitSEXP, SEXP otolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type mod(modSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type icormat(icormatSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ctimes(ctimesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type categories(categoriesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type omaxit(omaxitSEXP);
    Rcpp::traits::input_parameter< double >::type otol(otolSEXP);
    rcpp_result_gen = Rcpp::wrap(ordgee(mod, icormat, X, ctimes, categories, omaxit, otol));
    return rcpp_result_gen;
END_RCPP
}
// smat
List smat(Rcpp::NumericVector coeff);
RcppExport SEXP _cpmgee_smat(SEXP coeffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type coeff(coeffSEXP);
    rcpp_result_gen = Rcpp::wrap(smat(coeff));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cpmgee_alphpow", (DL_FUNC) &_cpmgee_alphpow, 2},
    {"_cpmgee_cmat", (DL_FUNC) &_cpmgee_cmat, 5},
    {"_cpmgee_fixmod", (DL_FUNC) &_cpmgee_fixmod, 3},
    {"_cpmgee_mat_add", (DL_FUNC) &_cpmgee_mat_add, 2},
    {"_cpmgee_mat_minus", (DL_FUNC) &_cpmgee_mat_minus, 2},
    {"_cpmgee_ordgee", (DL_FUNC) &_cpmgee_ordgee, 7},
    {"_cpmgee_smat", (DL_FUNC) &_cpmgee_smat, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_cpmgee(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
